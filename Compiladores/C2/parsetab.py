
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN COLON CONTENT EQUALS IDENTIFIER ILLEGAL_CHARACTER LEFT_PAREN NUMBER OPERATOR RESERVED_WORD RIGHT_PAREN STRING TYPEstatement : variable_declaration\n                     | function_declaration\n                     | condition_declaration\n                     | start_declarationvariable_declaration : TYPE IDENTIFIER EQUALS valuefunction_declaration : RESERVED_WORD IDENTIFIER LEFT_PAREN RIGHT_PAREN COLON CONTENTcondition_declaration : RESERVED_WORD expression COLON CONTENTstart_declaration : RESERVED_WORD COLON CONTENTexpression : value_exp OPERATOR value_expvalue_exp : IDENTIFIER\n                    | NUMBER\n                    | BOOLEANvalue : NUMBER\n                 | STRING\n                 | BOOLEAN'
    
_lr_action_items = {'TYPE':([0,],[6,]),'RESERVED_WORD':([0,],[7,]),'$end':([1,2,3,4,5,17,20,21,22,23,25,29,],[0,-1,-2,-3,-4,-8,-5,-13,-14,-15,-7,-6,]),'IDENTIFIER':([6,7,19,],[8,9,27,]),'COLON':([7,11,13,14,24,26,27,],[10,18,-11,-12,28,-9,-10,]),'NUMBER':([7,15,19,],[13,21,13,]),'BOOLEAN':([7,15,19,],[14,23,14,]),'EQUALS':([8,],[15,]),'LEFT_PAREN':([9,],[16,]),'OPERATOR':([9,12,13,14,],[-10,19,-11,-12,]),'CONTENT':([10,18,28,],[17,25,29,]),'STRING':([15,],[22,]),'RIGHT_PAREN':([16,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'variable_declaration':([0,],[2,]),'function_declaration':([0,],[3,]),'condition_declaration':([0,],[4,]),'start_declaration':([0,],[5,]),'expression':([7,],[11,]),'value_exp':([7,19,],[12,26,]),'value':([15,],[20,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> variable_declaration','statement',1,'p_statement','a_sintactico.py',8),
  ('statement -> function_declaration','statement',1,'p_statement','a_sintactico.py',9),
  ('statement -> condition_declaration','statement',1,'p_statement','a_sintactico.py',10),
  ('statement -> start_declaration','statement',1,'p_statement','a_sintactico.py',11),
  ('variable_declaration -> TYPE IDENTIFIER EQUALS value','variable_declaration',4,'p_variable_declaration','a_sintactico.py',15),
  ('function_declaration -> RESERVED_WORD IDENTIFIER LEFT_PAREN RIGHT_PAREN COLON CONTENT','function_declaration',6,'p_function_declaration','a_sintactico.py',30),
  ('condition_declaration -> RESERVED_WORD expression COLON CONTENT','condition_declaration',4,'p_condition_declaration','a_sintactico.py',38),
  ('start_declaration -> RESERVED_WORD COLON CONTENT','start_declaration',3,'p_start_declaration','a_sintactico.py',46),
  ('expression -> value_exp OPERATOR value_exp','expression',3,'p_expression','a_sintactico.py',54),
  ('value_exp -> IDENTIFIER','value_exp',1,'p_value_expression','a_sintactico.py',58),
  ('value_exp -> NUMBER','value_exp',1,'p_value_expression','a_sintactico.py',59),
  ('value_exp -> BOOLEAN','value_exp',1,'p_value_expression','a_sintactico.py',60),
  ('value -> NUMBER','value',1,'p_value','a_sintactico.py',64),
  ('value -> STRING','value',1,'p_value','a_sintactico.py',65),
  ('value -> BOOLEAN','value',1,'p_value','a_sintactico.py',66),
]
